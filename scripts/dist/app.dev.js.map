{"version":3,"sources":["app.js"],"names":["document","addEventListener","display","getElementById","buttons","querySelectorAll","value","lastInput","specialModeActive","forEach","button","getAttribute","textContent","handleButtonClick","event","key","console","log","slice","expression","replace","result","eval","toString","includes","split","length","parseFloat","toFixed","error","setTimeout","visibleValue"],"mappings":"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","sourcesContent":["// This file contains the JavaScript code for the calculator functionality.\n// It handles user input, performs calculations, and updates the display.\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const display = document.getElementById('display');\n    const buttons = document.querySelectorAll('.btn');\n    \n    // Initialize display with empty string\n    display.value = '';\n    \n    // Track the last input for special feature\n    let lastInput = '';\n    \n    // Special mode flag for easter egg\n    let specialModeActive = false;\n    \n    // Add click event to all buttons\n    buttons.forEach(button => {\n        button.addEventListener('click', () => {\n            // Get the button's value from its text content if data-value is missing\n            const value = button.getAttribute('data-value') || button.textContent;\n            handleButtonClick(value);\n        });\n    });\n    \n    // Handle keyboard input\n    document.addEventListener('keydown', (event) => {\n        const key = event.key;\n        if ((key >= '0' && key <= '9') || key === '+' || key === '-' || key === '*' || key === '/') {\n            handleButtonClick(key);\n        } else if (key === '.') {\n            handleButtonClick('.');\n        } else if (key === 'Enter') {\n            handleButtonClick('=');\n        } else if (key === 'Escape') {\n            handleButtonClick('clear');\n        } else if (key === 'Backspace') {\n            handleButtonClick('backspace');\n        }\n    });\n    \n    // Function to handle button clicks\n    function handleButtonClick(value) {\n        // For debugging\n        console.log('Button clicked:', value);\n        \n        switch(value) {\n            case 'C':\n            case 'clear':\n                display.value = '';\n                lastInput = '';\n                // Reset special mode on clear\n                specialModeActive = false;\n                break;\n                \n            case 'backspace':\n            case '⌫':\n                display.value = display.value.slice(0, -1);\n                lastInput = display.value.slice(-1) || '';\n                break;\n                \n            case '.':\n                // Secret activation: dot activates special mode but doesn't appear\n                specialModeActive = true;\n                console.log('Special mode activated!');\n                // Don't add the dot to the display\n                lastInput = '.';\n                break;\n                \n            case '=':\n                if (specialModeActive) {\n                    // Special mode is active, show the easter egg\n                    display.value = '575393520';\n                    // Reset special mode after showing it once\n                    specialModeActive = false;\n                    lastInput = '=';\n                    break;\n                }\n                \n                try {\n                    if (display.value) {\n                        // Replace visual operators with JavaScript operators\n                        let expression = display.value\n                            .replace(/×/g, '*')\n                            .replace(/÷/g, '/')\n                            .replace(/−/g, '-');\n                        \n                        console.log('Evaluating:', expression);\n                        \n                        // Evaluate and format the result\n                        let result = eval(expression);\n                        \n                        // Format the result (handle long decimals)\n                        if (result.toString().includes('.') && result.toString().split('.')[1].length > 8) {\n                            result = parseFloat(result.toFixed(8));\n                        }\n                        \n                        display.value = result;\n                    }\n                } catch (error) {\n                    console.error('Calculation error:', error);\n                    display.value = 'Error';\n                    setTimeout(() => display.value = '', 1500);\n                }\n                lastInput = '=';\n                break;\n                \n            case '%':\n                try {\n                    display.value = (parseFloat(display.value) / 100).toString();\n                } catch (error) {\n                    display.value = 'Error';\n                    setTimeout(() => display.value = '', 1500);\n                }\n                lastInput = '%';\n                break;\n                \n            default:\n                // For operators, handle special characters\n                if (['+', '-', '*', '/', '×', '÷', '−'].includes(value)) {\n                    // Replace JavaScript operators with visual operators\n                    const visibleValue = value\n                        .replace('*', '×')\n                        .replace('/', '÷')\n                        .replace('-', '−');\n                    \n                    display.value += visibleValue;\n                    lastInput = visibleValue;\n                } else {\n                    display.value += value;\n                    lastInput = value;\n                }\n        }\n    }\n});\n\n"],"file":"app.dev.js"}