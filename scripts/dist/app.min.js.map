{"version":3,"sources":["app.js"],"names":["document","addEventListener","getElementById","display","value","lastInput","buttons","button","console","log","specialModeActive","slice","expression","toString","includes","parseFloat","result","toFixed","replace","eval","split","length","error","setTimeout","visibleValue","handleButtonClick","getAttribute","textContent","event","key"],"mappings":"aACAA,SAAAC,iBAAA,mBAAA,WAEAD,IAASC,QAAAA,SAAiBC,eAA1B,WACUC,QAAUH,SAASE,iBAAe,QAIxCC,QAAQC,MAAR,GAGA,IAAIC,UAAY,GAMhBC,mBAAgBC,EA6BZ,SAAOH,kBAAPA,OAIQC,OAFJG,QAAKC,IAAL,kBAAAL,OAEIC,OAHJ,IAAK,IAKDK,IAAAA,QACAP,QAAAC,MAAA,GAHAC,UAAY,GAMhBK,mBAAA,EACYN,MAER,IAAA,YAHJ,IAAK,IAKLD,QAAAC,MAAAD,QAAAC,MAAAO,MAAA,GAAA,GACIN,UAAAF,QAAAC,MAAAO,OAAA,IAAA,GACAD,MAFJ,IAAK,IAMDA,mBAAA,EAHAF,QAAQC,IAAI,2BAMRC,UAAAA,IACA,MAFR,IAAK,IAKGA,GAAAA,kBAAA,CAEAP,QAAAC,MAAA,YAFAM,mBAAoB,EAKpBL,UAAA,IACIF,MAOAK,IAPJ,GAAIL,QAAQC,MAAO,CAEf,IAAIQ,WAAaT,QAAQC,MAWdS,QAAWC,KAAS,KAClBC,QAAWC,KAAOC,KAC9BC,QAAA,KAAA,KAEOd,QAAQY,IAAhB,cAAAJ,YAGU,IAAAI,OAAAG,KAAAP,YAEWR,OAAQS,WAAtBC,SAAA,MAAA,EAAAE,OAAAH,WAAAO,MAAA,KAAA,GAAAC,SAAXL,OAAAD,WAAAC,OAAAC,QAAA,KAEJd,QAAAC,MAAAY,QALE,MAAOM,GAQbd,QAAAc,MAAA,qBAAAA,GACQnB,QAAAC,MAAA,QACQA,WAASW,WAAAA,OAAUZ,QAAQC,MAAlB,IAA4B,MAE7CD,UAAgB,IAChBoB,MAAU,IAAA,IACb,IAJGpB,QAAQC,OAASW,WAAWZ,QAAQC,OAAS,KAAKS,WAK7C,MAATS,GACAnB,QAAAC,MAAA,QAHImB,WAAW,WAAA,OAAMpB,QAAQC,MAAQ,IAAI,MAMzCC,UAAA,IACI,MAEA,QAMAA,GAAS,CAAA,IAAGmB,IAAAA,IAAZ,IAAA,IAAA,IAAA,KAAAV,SAAAV,OAAA,CAEQA,IAARoB,aAAApB,MACYA,QAAZ,IAAA,KACHc,QAAA,IAAA,KAPQA,QAAQ,IAAK,KASjCf,QAAAC,OAAAoB,aAlILnB,UAAAmB,kBA8HoBrB,QAAQC,OAASA,MACjBC,UAAYD,OA9GpBE,QAAMF,QAAQG,SAAAA,GACdkB,EAAAA,iBAAA,QAAA,WAAAA,kBAIRlB,EAAAmB,aAAA,eAAAnB,EAAAoB,iBAIQF,SAAAA,iBAAA,UAAA,SAAAG,GADJ,IAEOC,EAAOD,EAAPC,IACHJ,KAAAA,GAAiBI,GAAjB,KAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,EACGJ,kBAAAI,GACc,MAAjBJ,EACGA,kBAAY,KACG,UAAlBA,EACGA,kBAAY,KACG,WAAlBA,EACHA,kBAAA,SAGL,cAAAI,GAJQJ,kBAAkB","file":"app.min.js","sourcesContent":["// This file contains the JavaScript code for the calculator functionality.\n// It handles user input, performs calculations, and updates the display.\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const display = document.getElementById('display');\n    const buttons = document.querySelectorAll('.btn');\n    \n    // Initialize display with empty string\n    display.value = '';\n    \n    // Track the last input for special feature\n    let lastInput = '';\n    \n    // Special mode flag for easter egg\n    let specialModeActive = false;\n    \n    // Add click event to all buttons\n    buttons.forEach(button => {\n        button.addEventListener('click', () => {\n            // Get the button's value from its text content if data-value is missing\n            const value = button.getAttribute('data-value') || button.textContent;\n            handleButtonClick(value);\n        });\n    });\n    \n    // Handle keyboard input\n    document.addEventListener('keydown', (event) => {\n        const key = event.key;\n        if ((key >= '0' && key <= '9') || key === '+' || key === '-' || key === '*' || key === '/') {\n            handleButtonClick(key);\n        } else if (key === '.') {\n            handleButtonClick('.');\n        } else if (key === 'Enter') {\n            handleButtonClick('=');\n        } else if (key === 'Escape') {\n            handleButtonClick('clear');\n        } else if (key === 'Backspace') {\n            handleButtonClick('backspace');\n        }\n    });\n    \n    // Function to handle button clicks\n    function handleButtonClick(value) {\n        // For debugging\n        console.log('Button clicked:', value);\n        \n        switch(value) {\n            case 'C':\n            case 'clear':\n                display.value = '';\n                lastInput = '';\n                // Reset special mode on clear\n                specialModeActive = false;\n                break;\n                \n            case 'backspace':\n            case '⌫':\n                display.value = display.value.slice(0, -1);\n                lastInput = display.value.slice(-1) || '';\n                break;\n                \n            case '.':\n                // Secret activation: dot activates special mode but doesn't appear\n                specialModeActive = true;\n                console.log('Special mode activated!');\n                // Don't add the dot to the display\n                lastInput = '.';\n                break;\n                \n            case '=':\n                if (specialModeActive) {\n                    // Special mode is active, show the easter egg\n                    display.value = '575393520';\n                    // Reset special mode after showing it once\n                    specialModeActive = false;\n                    lastInput = '=';\n                    break;\n                }\n                \n                try {\n                    if (display.value) {\n                        // Replace visual operators with JavaScript operators\n                        let expression = display.value\n                            .replace(/×/g, '*')\n                            .replace(/÷/g, '/')\n                            .replace(/−/g, '-');\n                        \n                        console.log('Evaluating:', expression);\n                        \n                        // Evaluate and format the result\n                        let result = eval(expression);\n                        \n                        // Format the result (handle long decimals)\n                        if (result.toString().includes('.') && result.toString().split('.')[1].length > 8) {\n                            result = parseFloat(result.toFixed(8));\n                        }\n                        \n                        display.value = result;\n                    }\n                } catch (error) {\n                    console.error('Calculation error:', error);\n                    display.value = 'Error';\n                    setTimeout(() => display.value = '', 1500);\n                }\n                lastInput = '=';\n                break;\n                \n            case '%':\n                try {\n                    display.value = (parseFloat(display.value) / 100).toString();\n                } catch (error) {\n                    display.value = 'Error';\n                    setTimeout(() => display.value = '', 1500);\n                }\n                lastInput = '%';\n                break;\n                \n            default:\n                // For operators, handle special characters\n                if (['+', '-', '*', '/', '×', '÷', '−'].includes(value)) {\n                    // Replace JavaScript operators with visual operators\n                    const visibleValue = value\n                        .replace('*', '×')\n                        .replace('/', '÷')\n                        .replace('-', '−');\n                    \n                    display.value += visibleValue;\n                    lastInput = visibleValue;\n                } else {\n                    display.value += value;\n                    lastInput = value;\n                }\n        }\n    }\n});\n\n"]}